name: Deploy to AWS ECR with Blue-Green

on:
  push:
    branches:
      - main

env:
  AWS_REGION: ap-northeast-2
  ECR_REPOSITORY: acc-cicd
  IMAGE_TAG: latest

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. 코드 체크아웃
      - name: Checkout code
        uses: actions/checkout@v3

      # 2. AWS 자격 증명 구성
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # 3. Amazon ECR 로그인
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      # 4. Docker 이미지 빌드, 태그, 푸시
      - name: Build, tag, and push Docker image to ECR
        run: |
          IMAGE_URI="058264092003.dkr.ecr.ap-northeast-2.amazonaws.com/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}"
          echo "Building Docker image: $IMAGE_URI"
          docker build -t $IMAGE_URI .
          echo "Pushing Docker image to ECR..."
          docker push $IMAGE_URI

      # 5. EC2에 배포 및 Nginx 스위칭
      - name: Deploy to EC2 and switch Nginx
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ec2-user
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            set -e

            # AWS 자격 증명 환경 변수 설정
            export AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
            export AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
            export AWS_REGION=${{ env.AWS_REGION }}

            IMAGE_URI="058264092003.dkr.ecr.ap-northeast-2.amazonaws.com/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}"

            echo "Deploying new version: $IMAGE_URI"

            # EC2에서 AWS ECR 다시 로그인 (인증 문제 방지)
            echo "Logging in to ECR from EC2..."
            aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin 058264092003.dkr.ecr.ap-northeast-2.amazonaws.com

            # 현재 활성 버전 확인 (blue or green)
            CURRENT_VERSION=$(docker ps --format '{{.Names}}' | grep fastapi- | grep -o 'blue\|green' || echo "none")
            echo "Current active version: $CURRENT_VERSION"

            if [ "$CURRENT_VERSION" == "blue" ]; then
              NEXT_VERSION="green"
              PORT="8002"
              COMPOSE_FILE="docker-compose.green.yml"
            else
              NEXT_VERSION="blue"
              PORT="8001"
              COMPOSE_FILE="docker-compose.blue.yml"
            fi

            echo "Next version to deploy: $NEXT_VERSION (Port: $PORT)"

            # 최신 이미지 Pull
            docker pull $IMAGE_URI

            # 최신 docker-compose 파일로 실행
            cd ~/app
            docker-compose -f $COMPOSE_FILE up -d --force-recreate

            # Health check (간단한 버전)
            echo "Performing health check on http://localhost:$PORT/"
            sleep 5
            if ! curl --fail http://localhost:$PORT/; then
              echo "Health check failed for $NEXT_VERSION!"
              exit 1
            fi
            echo "Health check succeeded!"

            # nginx 설정 스위치
            echo "Switching Nginx to $NEXT_VERSION"
            ./switch_version.sh $NEXT_VERSION

            # 이전 버전 종료
            if [ "$CURRENT_VERSION" != "none" ]; then
              echo "Stopping previous version: $CURRENT_VERSION"
              docker stop fastapi-$CURRENT_VERSION
              docker rm fastapi-$CURRENT_VERSION
            fi

            echo "Switched traffic to $NEXT_VERSION"
